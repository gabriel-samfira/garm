package worker

import (
	"log/slog"

	dbCommon "github.com/cloudbase/garm/database/common"
	"github.com/cloudbase/garm/params"
)

// handleInstanceWatcherEvent watches for events that involve instances which belong to
// a particular scale set. These events are generated by either the github scale set listenet
// or by the user when they force delete a runner. The instance states this function cares
// about are: pending_create, pending_delete and pending_force_delete
func (s *ScaleSetWorker) handleInstanceWatcherEvent(event dbCommon.ChangePayload) {
	switch event.EntityType {
	case dbCommon.InstanceEntityType:
	default:
		slog.ErrorContext(s.ctx, "invalid entity type", "entity_type", event.EntityType)
	}

	data, ok := event.Payload.(params.Instance)
	if !ok {
		slog.ErrorContext(s.ctx, "instance watcher handler got invalid payload type", "operation", event.Operation, "entity_type", event.EntityType)
		return
	}

	// lock instance object
	// check for cached instance info
	// compare incomming instance payload to cached data
	// compute delta and generate action plan
	// execute action plan
	// update state
	// unlock instance object
	slog.DebugContext(s.ctx, "got instance payload", "payload", data)

}

func (s *ScaleSetWorker) runScaleSetInstanceWatcher() {
	defer s.scalesetConsumer.Close()
	for {
		select {
		case <-s.quit:
			return
		case <-s.ctx.Done():
			return
		case event, ok := <-s.scalesetInstanceConsumer.Watch():
			if !ok {
				return
			}
			go s.handleInstanceWatcherEvent(event)
		}
	}
}
