upstream garm_backend {
    # garm can listen on localhost or be anywhere else in your
    # network.
    server 127.0.0.1:9997       weight=5;
}

server {
    server_name garm.example.com;
    # This is meant to be your public IP
    listen 10.10.10.110:443 ssl;

    location /api/v1/ws {
        proxy_pass http://garm_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }

    location / {
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Host $http_host;

        proxy_pass http://garm_backend;
        proxy_set_header        Host    $Host;
        proxy_redirect off;
    }

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;
}

# This config, and the SSL one above will expose every endpoint garm has
# including the instance callback endpoints, metadata URL, metrics, etc.
server {
    server_name garm.example.com;
    # This is meant to be yout public IP
    listen 10.10.10.110:80;

    if ($host = garm.example.com) {
        # Redirect to https
        return 301 https://$host$request_uri;
    }

    return 404;
}

# Alternatively, you can partition how garm is exposed to instances,
# metrics consumers and users.
# This example will remove access to instance callbacks, metadata URL
# and metrics for users. These API endpoints are not needed in order
# for users to interact with garm.
# server {
#     server_name garm.example.com;
#     # This is meant to be your public IP
#     listen 10.10.10.110:443 ssl;
#
#     location /api/v1/ws {
#         proxy_pass http://garm_backend;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "Upgrade";
#         proxy_set_header Host $host;
#     }
#
#     location /api/v1/metrics {
#         return 404;
#     }
#
#     location /api/v1/metadata {
#         return 404;
#     }
#
#     location /api/v1/callbacks {
#         return 404;
#     }
#
#     location / {
#         # Everything else is passed to the backend.
#         proxy_set_header X-Forwarded-For $remote_addr;
#         proxy_set_header X-Forwarded-Host $http_host;
#
#         proxy_pass http://garm_backend$request_uri;
#         proxy_set_header        Host    $Host;
#         proxy_redirect off;
#     }
#
#     ssl_certificate /etc/nginx/ssl/fullchain.pem;
#     ssl_certificate_key /etc/nginx/ssl/privkey.pem;
# }

# server {
#     server_name garm.internal.example.com;
#     # You can set this directive to an IP in a different network,
#     # which can be reached by the instances garm spins up. This way
#     # you can partition garm's endpoints to only be available on the
#     # interfaces you want.
#     listen 192.168.122.200:443 ssl;
#
#     location ~ (/api/v1/metadata|/api/v1/callbacks) {
#         # Allow instance callbacks and metadata URL
#         proxy_set_header X-Forwarded-For $remote_addr;
#         proxy_set_header X-Forwarded-Host $http_host;
#
#         proxy_pass http://garm_backend$request_uri;
#         proxy_set_header        Host    $Host;
#         proxy_redirect off;
#     }
#
#     location / {
#         # Deny everything else. Instances don't need to reach any other APIs.
#         return 404;
#     }
#
#     ssl_certificate /etc/nginx/ssl/fullchain.pem;
#     ssl_certificate_key /etc/nginx/ssl/privkey.pem;
# }

# This is an example of a server block that only exposes metrics. If you need
# something really restrictive, you can define something like this. If you do not
# you can have the /metrics location moved into one of the examples above
# or simply forward all of them to the backend.
# server {
#     server_name garm.metrics.example.com;
#     # We can use a different port for metrics if we want. It's not
#     # strictly mandatory. You can expose metrics whichever way you want.
#     listen 192.168.122.200:8888 ssl;
#
#     location /metrics {
#         # Allow metrics collection.
#         proxy_set_header X-Forwarded-For $remote_addr;
#         proxy_set_header X-Forwarded-Host $http_host;
#
#         proxy_pass http://garm_backend$request_uri;
#         proxy_set_header        Host    $Host;
#         proxy_redirect off;
#     }
#
#     location / {
#         # Deny everything else. This endpoint exposes metrics only.
#         return 404;
#     }
#
#     ssl_certificate /etc/nginx/ssl/fullchain.pem;
#     ssl_certificate_key /etc/nginx/ssl/privkey.pem;
# }